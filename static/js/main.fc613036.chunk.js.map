{"version":3,"sources":["Algorithms lazy /^/.*$/ groupOptions: {} namespace object","Visualizer/Grid/Grid.jsx","Visualizer/Menu/Menu.jsx","Visualizer/Visualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","Grid","props","state","grid","this","onMouseLeave","setMouseDownFalse","row","rowIdx","key","cell","cellIdx","className","onMouseDown","event","mouseEventHandler","setMouseDownTrue","onMouseUp","onMouseOver","mouseDown","Component","Menu","type","onClick","selectNode","nodes","WALL_NODE","START_NODE","END_NODE","runAlgo","clearBoard","value","undefined","onChange","updateAlgo","target","hidden","NODES","Visualizer","setNodeToPlace","nodeType","nodeToPlace","preventDefault","clickedCellID","tableElement","querySelector","validateNode","parseInt","split","col","node","updateGrid","isWall","setState","startNode","endNode","getInitialGrid","rows","document","getElementById","children","i","length","j","animateDijkstra","sp","visited","end","forEach","setTimeout","animateSPNodes","algorithm","algo","results","default","run","window","alert","algoName","currentRow","push","cost","Infinity","path","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mNAAA,IAAIA,EAAM,CACT,aAAc,CACb,EACA,GAED,gBAAiB,CAChB,EACA,IAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,WACzC,OAAOJ,EAAoBS,MAG7BX,EAAoBY,KAAO,WAC1B,OAAOC,OAAOD,KAAKb,IAEpBC,EAAoBW,GAAK,GACzBG,EAAOC,QAAUf,G,mHCzBIgB,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,GAFI,E,sEAKT,IAAD,OACDC,EAAOC,KAAKH,MAAME,KACxB,OACE,oCACE,2BAAOR,GAAG,OAAOU,aAAcD,KAAKH,MAAMK,mBACxC,2BAAOX,GAAG,aACPQ,EAAKpB,KAAI,SAACwB,EAAKC,GACd,OACE,wBAAIC,IAAKD,EAAQb,GAAE,cAASa,IACzBD,EAAIxB,KAAI,SAAC2B,EAAMC,GACd,OACE,wBACEF,IAAKE,EACLhB,GAAE,eAAUa,EAAV,YAAoBG,GACtBC,UAAU,YACVC,YAAa,SAAAC,GACX,EAAKb,MAAMc,kBAAkBD,GAC7B,EAAKb,MAAMe,oBAEbC,UAAW,EAAKhB,MAAMK,kBACtBY,YAAa,SAAAJ,GACP,EAAKb,MAAMkB,WACb,EAAKlB,MAAMc,kBAAkBD,oB,GA5BvBM,cCDbC,E,YACnB,WAAYpB,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,GAFI,E,sEAKT,IAAD,OACP,OACE,yBAAKU,UAAU,QACb,4BACEU,KAAK,SACLC,QAAS,kBAAM,EAAKtB,MAAMuB,WAAW,EAAKvB,MAAMwB,MAAMC,aAFxD,QAKA,4BACEJ,KAAK,SACLC,QAAS,kBAAM,EAAKtB,MAAMuB,WAAW,EAAKvB,MAAMwB,MAAME,cAFxD,SAKA,4BACEL,KAAK,SACLC,QAAS,kBAAM,EAAKtB,MAAMuB,WAAW,EAAKvB,MAAMwB,MAAMG,YAFxD,OAKA,4BAAQN,KAAK,SAASC,QAAS,kBAAM,EAAKtB,MAAM4B,YAAhD,OAGA,4BAAQP,KAAK,SAASC,QAAS,kBAAM,EAAKtB,MAAM6B,eAAhD,eAGA,4BACEnC,GAAG,QACHoC,WAAOC,EACPC,SAAU,SAAAnB,GAAK,OAAI,EAAKb,MAAMiC,WAAWpB,EAAMqB,OAAOJ,SACtD,4BAAQK,QAAM,GAAd,uBACA,4BAAQL,MAAM,YAAd,kB,GAnCwBX,aCI5BiB,G,MAAQ,CACZX,UAAW,EACXC,WAAY,EACZC,SAAU,IAGSU,E,YACnB,WAAYrC,GAAQ,IAAD,8BACjB,4CAAMA,KAqBRsC,eAAiB,SAAAC,GACf,EAAKC,YAAcD,GAvBF,EA0BnBzB,kBAAoB,SAAAD,GAClBA,EAAM4B,iBACN,IAAMC,EAAgB7B,EAAMqB,OAAOxC,GAC7Be,EAAO,EAAKkC,aAAaC,cAAlB,WAAoCF,IAE1B,cAAnBjC,EAAKE,YACPF,EAAKE,UAAY,EAAKkC,aAAaH,KAhCpB,EAsCnBG,aAAe,SAAAH,GACb,IAAIpC,EAAMwC,SAASJ,EAAcK,MAAM,KAAK,IACxCC,EAAMF,SAASJ,EAAcK,MAAM,KAAK,IAExCE,EAAO,EAAKhD,MAAMC,KAAKI,GAAK0C,GAEhC,OAAQ,EAAKR,aACX,KAAK,EACH,IAAMU,EAAa,EAAKjD,MAAMC,KAG9B,OAFAgD,EAAW5C,GAAK0C,GAAKG,QAAS,EAC9B,EAAKC,SAAS,CAAElD,KAAMgD,IACf,OAET,KAAK,EACH,GAAI,EAAKG,UACO,EAAKV,aAAaC,cAAlB,gBACH,EAAKS,UAAU/C,IADZ,YACmB,EAAK+C,UAAUL,MAExCrC,UAAY,YAKtB,OAFA,EAAK0C,UAAYJ,EAEV,QAET,KAAK,EACH,GAAI,EAAKK,QACO,EAAKX,aAAaC,cAAlB,gBACH,EAAKU,QAAQhD,IADV,YACiB,EAAKgD,QAAQN,MAEpCrC,UAAY,YAKtB,OAFA,EAAK2C,QAAUL,EAER,QAzEM,EAgFnBpB,WAAa,WACX,EAAKuB,SAAS,CAAElD,KAAMqD,MACtB,IAAMC,EAAOC,SAASC,eAAe,aAAaC,SAClD,EAAKN,UAAY,KACjB,EAAKC,QAAU,KAEf,IAAK,IAAIM,EAAI,EAAGA,EAAIJ,EAAKK,OAAQD,IAE/B,IADA,IAAMtD,EAAMkD,EAAKI,GAAGD,SACXG,EAAI,EAAGA,EAAIxD,EAAIuD,OAAQC,IAC9BxD,EAAIwD,GAAGnD,UAAY,aAzFN,EA8FnBoD,gBAAkB,SAACC,EAAIC,GACrB,IAAIL,EAAI,EACFM,EAAM,EAAKvB,aAAaC,cAAlB,gBACD,EAAKU,QAAQhD,IADZ,YACmB,EAAKgD,QAAQN,MAE5CiB,EAAQE,SAAQ,SAAAlB,GACd,IAAMxC,EAAO,EAAKkC,aAAaC,cAAlB,gBACFK,EAAK3C,IADH,YACU2C,EAAKD,MAExBvC,IAASyD,GACXE,YAAW,WACT,EAAKC,eAAeL,KACnB,GAAKJ,GAGa,UAAnBnD,EAAKE,WAA4C,QAAnBF,EAAKE,YACrCyD,YAAW,WACT3D,EAAKE,UAAY,YAChB,GAAKiD,GACRA,SAjHa,EAsHnBS,eAAiB,SAAAL,GACf,IAAIF,EAAI,EACRE,EAAGG,SAAQ,SAAAlB,GACT,IAAMxC,EAAO,EAAKkC,aAAaC,cAAlB,gBACFK,EAAK3C,IADH,YACU2C,EAAKD,MAGL,UAAnBvC,EAAKE,WAA4C,QAAnBF,EAAKE,YACrCyD,YAAW,WACT3D,EAAKE,UAAY,iBAChB,GAAKmD,GACRA,SAjIa,EAsInBlC,QAAU,WACJ,EAAK0C,WAAa,EAAKjB,WAAa,EAAKC,QAC3C,MAAO,YAAiB,EAAKgB,YAAajF,MAAK,SAAAkF,GAC7C,IAKIC,EALe,IAAID,EAAKE,QAC1B,EAAKxE,MAAMC,KACX,EAAKmD,UACL,EAAKC,SAEoBoB,MAC3B,EAAKX,gBAAgBS,EAAQR,GAAIQ,EAAQP,YAG3CU,OAAOC,MACL,oGAjJJ,EAAK3E,MAAQ,CACXC,KAAM,IAGR,EAAKsC,YAAcJ,EAAMX,UACzB,EAAK4B,UAAY,KACjB,EAAKC,QAAU,KACf,EAAKpC,WAAY,EACjB,EAAKoD,UAAY,KACjB,EAAK3B,aAAe,KAXH,E,iFAejB,IAAMzC,EAAOqD,IACbpD,KAAKwC,aAAec,SAASC,eAAe,QAC5CvD,KAAKiD,SAAS,CACZlD,KAAMA,M,+BAsIA,IAAD,OACP,OACE,yBAAKS,UAAU,QACb,yBAAKjB,GAAG,QACN,kBAAC,EAAD,CACE6B,WAAYpB,KAAKmC,eACjBd,MAAOY,EACPR,QAASzB,KAAKyB,QACdC,WAAY1B,KAAK0B,WACjBI,WAAY,SAAA4C,GACV,EAAKP,UAAYO,MAIvB,yBAAKnF,GAAG,QACN,kBAAC,EAAD,CACEoB,kBAAmBX,KAAKW,kBACxBT,kBAAmB,kBAAO,EAAKa,WAAY,GAC3CH,iBAAkB,kBAAO,EAAKG,WAAY,GAC1CA,UAAWf,KAAKe,UAChBhB,KAAMC,KAAKF,MAAMC,a,GA7KWiB,aAqLlCoC,EAAiB,WAGrB,IAFA,IAAMrD,EAAO,GAEJI,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAEjC,IADA,IAAMwE,EAAa,GACV9B,EAAM,EAAGA,EAAM,GAAIA,IAC1B8B,EAAWC,KAAK,CACdzE,IAAKA,EACL0C,IAAKA,EACLgC,KAAMC,IACNC,KAAM,KACN/B,QAAQ,IAGZjD,EAAK6E,KAAKD,GAEZ,OAAO5E,GCtMMiF,MARf,WACE,OACE,yBAAKxE,UAAU,OACb,kBAAC,EAAD,QCMcyE,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAShC,SAASC,eAAe,SD6H3C,kBAAmBgC,WACrBA,UAAUC,cAAcC,MACrBvG,MAAK,SAAAwG,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fc613036.chunk.js","sourcesContent":["var map = {\n\t\"./Dijkstra\": [\n\t\t8,\n\t\t0\n\t],\n\t\"./Dijkstra.js\": [\n\t\t8,\n\t\t0\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 17;\nmodule.exports = webpackAsyncContext;","import React, { Component } from \"react\";\r\nimport \"./Grid.css\";\r\n\r\nexport default class Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const grid = this.props.grid;\r\n    return (\r\n      <>\r\n        <table id=\"grid\" onMouseLeave={this.props.setMouseDownFalse}>\r\n          <tbody id=\"tableBody\">\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                <tr key={rowIdx} id={`row_${rowIdx}`}>\r\n                  {row.map((cell, cellIdx) => {\r\n                    return (\r\n                      <td\r\n                        key={cellIdx}\r\n                        id={`node_${rowIdx}_${cellIdx}`}\r\n                        className=\"unvisited\"\r\n                        onMouseDown={event => {\r\n                          this.props.mouseEventHandler(event);\r\n                          this.props.setMouseDownTrue();\r\n                        }}\r\n                        onMouseUp={this.props.setMouseDownFalse}\r\n                        onMouseOver={event => {\r\n                          if (this.props.mouseDown) {\r\n                            this.props.mouseEventHandler(event);\r\n                          }\r\n                        }}></td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Menu extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"menu\">\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => this.props.selectNode(this.props.nodes.WALL_NODE)}>\r\n          Wall\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => this.props.selectNode(this.props.nodes.START_NODE)}>\r\n          Start\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => this.props.selectNode(this.props.nodes.END_NODE)}>\r\n          End\r\n        </button>\r\n        <button type=\"button\" onClick={() => this.props.runAlgo()}>\r\n          Run\r\n        </button>\r\n        <button type=\"button\" onClick={() => this.props.clearBoard()}>\r\n          Clear Board\r\n        </button>\r\n        <select\r\n          id=\"algos\"\r\n          value={undefined}\r\n          onChange={event => this.props.updateAlgo(event.target.value)}>\r\n          <option hidden>Choose an Algorithm</option>\r\n          <option value=\"Dijkstra\">Dijkstra</option>\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"./Grid/Grid\";\r\nimport Menu from \"./Menu/Menu\";\r\n\r\nimport \"./Visualizer.css\";\r\n\r\nconst NODES = {\r\n  WALL_NODE: 0,\r\n  START_NODE: 1,\r\n  END_NODE: 2\r\n};\r\n\r\nexport default class Visualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: []\r\n    };\r\n\r\n    this.nodeToPlace = NODES.WALL_NODE;\r\n    this.startNode = null;\r\n    this.endNode = null;\r\n    this.mouseDown = false;\r\n    this.algorithm = null;\r\n    this.tableElement = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.tableElement = document.getElementById(\"grid\");\r\n    this.setState({\r\n      grid: grid\r\n    });\r\n  }\r\n\r\n  setNodeToPlace = nodeType => {\r\n    this.nodeToPlace = nodeType;\r\n  };\r\n\r\n  mouseEventHandler = event => {\r\n    event.preventDefault();\r\n    const clickedCellID = event.target.id;\r\n    const cell = this.tableElement.querySelector(`#${clickedCellID}`);\r\n\r\n    if (cell.className === \"unvisited\") {\r\n      cell.className = this.validateNode(clickedCellID);\r\n    }\r\n  };\r\n\r\n  //Checks if there is already a start node and an end node\r\n  //Returns the css class that corresponds to the selected node\r\n  validateNode = clickedCellID => {\r\n    let row = parseInt(clickedCellID.split(\"_\")[1]);\r\n    let col = parseInt(clickedCellID.split(\"_\")[2]);\r\n\r\n    let node = this.state.grid[row][col];\r\n\r\n    switch (this.nodeToPlace) {\r\n      case 0:\r\n        const updateGrid = this.state.grid;\r\n        updateGrid[row][col].isWall = true;\r\n        this.setState({ grid: updateGrid });\r\n        return \"wall\";\r\n\r\n      case 1:\r\n        if (this.startNode) {\r\n          let element = this.tableElement.querySelector(\r\n            `#node_${this.startNode.row}_${this.startNode.col}`\r\n          );\r\n          element.className = \"unvisited\";\r\n        }\r\n\r\n        this.startNode = node;\r\n\r\n        return \"start\";\r\n\r\n      case 2:\r\n        if (this.endNode) {\r\n          let element = this.tableElement.querySelector(\r\n            `#node_${this.endNode.row}_${this.endNode.col}`\r\n          );\r\n          element.className = \"unvisited\";\r\n        }\r\n\r\n        this.endNode = node;\r\n\r\n        return \"end\";\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  clearBoard = () => {\r\n    this.setState({ grid: getInitialGrid() });\r\n    const rows = document.getElementById(\"tableBody\").children;\r\n    this.startNode = null;\r\n    this.endNode = null;\r\n\r\n    for (let i = 0; i < rows.length; i++) {\r\n      const row = rows[i].children;\r\n      for (let j = 0; j < row.length; j++) {\r\n        row[j].className = \"unvisited\";\r\n      }\r\n    }\r\n  };\r\n\r\n  animateDijkstra = (sp, visited) => {\r\n    let i = 1;\r\n    const end = this.tableElement.querySelector(\r\n      `#node_${this.endNode.row}_${this.endNode.col}`\r\n    );\r\n    visited.forEach(node => {\r\n      const cell = this.tableElement.querySelector(\r\n        `#node_${node.row}_${node.col}`\r\n      );\r\n      if (cell === end) {\r\n        setTimeout(() => {\r\n          this.animateSPNodes(sp);\r\n        }, 10 * i);\r\n      }\r\n\r\n      if (cell.className !== \"start\" && cell.className !== \"end\") {\r\n        setTimeout(() => {\r\n          cell.className = \"visited\";\r\n        }, 10 * i);\r\n        i++;\r\n      }\r\n    });\r\n  };\r\n\r\n  animateSPNodes = sp => {\r\n    let j = 1;\r\n    sp.forEach(node => {\r\n      const cell = this.tableElement.querySelector(\r\n        `#node_${node.row}_${node.col}`\r\n      );\r\n\r\n      if (cell.className !== \"start\" && cell.className !== \"end\") {\r\n        setTimeout(() => {\r\n          cell.className = \"shortestPath\";\r\n        }, 30 * j);\r\n        j++;\r\n      }\r\n    });\r\n  };\r\n\r\n  runAlgo = () => {\r\n    if (this.algorithm && this.startNode && this.endNode) {\r\n      import(`../Algorithms/${this.algorithm}`).then(algo => {\r\n        let algoInstance = new algo.default(\r\n          this.state.grid,\r\n          this.startNode,\r\n          this.endNode\r\n        );\r\n        let results = algoInstance.run();\r\n        this.animateDijkstra(results.sp, results.visited);\r\n      });\r\n    } else {\r\n      window.alert(\r\n        \"Something's missing! Check if you placed both start and end nodes nad if you chose an algorithm\"\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main\">\r\n        <div id=\"menu\">\r\n          <Menu\r\n            selectNode={this.setNodeToPlace}\r\n            nodes={NODES}\r\n            runAlgo={this.runAlgo}\r\n            clearBoard={this.clearBoard}\r\n            updateAlgo={algoName => {\r\n              this.algorithm = algoName;\r\n            }}\r\n          />\r\n        </div>\r\n        <div id=\"grid\">\r\n          <Grid\r\n            mouseEventHandler={this.mouseEventHandler}\r\n            setMouseDownFalse={() => (this.mouseDown = false)}\r\n            setMouseDownTrue={() => (this.mouseDown = true)}\r\n            mouseDown={this.mouseDown}\r\n            grid={this.state.grid}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n\r\n  for (let row = 0; row < 17; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 70; col++) {\r\n      currentRow.push({\r\n        row: row,\r\n        col: col,\r\n        cost: Infinity,\r\n        path: null,\r\n        isWall: false\r\n      });\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n","import React from \"react\";\nimport Visualizer from \"./Visualizer/Visualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}