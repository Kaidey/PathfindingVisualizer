{"version":3,"sources":["Algorithms lazy /^/.*$/ groupOptions: {} namespace object","Visualizer/Grid/Grid.jsx","Visualizer/Menu/Dropdown.jsx","Visualizer/Menu/Index.jsx","Visualizer/AlgorithmCompletionMessage/AlgorithmCompletionMessage.jsx","Helpers/GridHandlers.js","Visualizer/Visualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","Grid","props","grid","this","onMouseLeave","setMouseDownFalse","row","rowIdx","key","cell","colIdx","className","onMouseDown","event","running","pathCleared","mouseEventHandler","setMouseDownTrue","onMouseUp","onMouseOver","mouseDown","Component","Dropdown","items","i","values","elements","forEach","val","push","onClick","function","labels","get","Index","algos","updateAlgo","algoLabels","nodes","selectNode","nodeLabels","runAlgo","clearBoard","clearPath","boardCleared","maze","AlgorithmCompletionMessage","pathExistsMessage","algorithm","elapsedTime","results","visited","length","sp","display","pathExists","GridHandlers","reject","currentRow","col","distance","Infinity","cost","path","isWall","node","NODES","WALL","START","END","NODE_LABELS","Map","ALGOS","DIJKSTRA","ASTAR","ALGO_LABELS","Visualizer","setNodeToPlace","nodeId","nodeToPlace","preventDefault","clickedCellID","target","tableElement","querySelector","validateNode","setState","parseInt","split","state","updateGrid","startNode","endNode","gridHandlers","getInitialGrid","cleanGrid","rows","document","getElementById","children","j","clearGridPath","animateAlgo","end","setTimeout","animateSPNodes","timeout","generateMaze","mazeGenerator","default","run","mazeGrid","algo","algoInstance","start","Date","getTime","window","alert","algoID","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b21af042.chunk.js","sourcesContent":["var map = {\n\t\"./AStar\": [\n\t\t7,\n\t\t0\n\t],\n\t\"./AStar.js\": [\n\t\t7,\n\t\t0\n\t],\n\t\"./Dijkstra\": [\n\t\t8,\n\t\t1\n\t],\n\t\"./Dijkstra.js\": [\n\t\t8,\n\t\t1\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 19;\nmodule.exports = webpackAsyncContext;","import React, { Component } from \"react\";\r\n\r\nimport \"./Grid.css\";\r\n\r\nclass Grid extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst grid = this.props.grid;\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<table id=\"grid\" onMouseLeave={this.props.setMouseDownFalse}>\r\n\t\t\t\t\t<tbody id=\"tableBody\">\r\n\t\t\t\t\t\t{grid.map((row, rowIdx) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<tr key={rowIdx} id={`row_${rowIdx}`}>\r\n\t\t\t\t\t\t\t\t\t{row.map((cell, colIdx) => {\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<td\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey={colIdx}\r\n\t\t\t\t\t\t\t\t\t\t\t\tid={`node_${rowIdx}_${colIdx}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"unvisited\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonMouseDown={(event) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (!this.props.running && this.props.pathCleared) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.props.mouseEventHandler(event);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.props.setMouseDownTrue();\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonMouseUp={() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.props.setMouseDownFalse();\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonMouseOver={(event) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (this.props.mouseDown) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.props.mouseEventHandler(event);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t></td>\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Grid;\r\n","import React, { Component } from \"react\";\r\nimport { render } from \"react-dom\";\r\n\r\nclass Dropdown extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\trender() {\r\n\t\tvar items = [];\r\n\t\tvar i = 0;\r\n\r\n\t\t//Extract the numeric values from the enum passed as a prop in elements\r\n\t\tlet elements = Object.values(this.props.elements);\r\n\r\n\t\telements.forEach((val) => {\r\n\t\t\titems.push(\r\n\t\t\t\t//props.function is either selectNode or updateAlgo, depending on what kind of Dropdown Index is attempting to create\r\n\t\t\t\t//props.labels is a Map which takes a numeric value (enum value) and maps it to a displayable string description of what it represents in the enum\r\n\t\t\t\t<li key={i} onClick={() => this.props.function(val)}>\r\n\t\t\t\t\t{this.props.labels.get(val)}\r\n\t\t\t\t</li>\r\n\t\t\t);\r\n\t\t\ti++;\r\n\t\t});\r\n\r\n\t\treturn <ul className=\"dropdown-menu\">{items}</ul>;\r\n\t}\r\n}\r\n\r\nexport default Dropdown;\r\n","import React, { Component } from \"react\";\r\nimport Dropdown from \"./Dropdown\";\r\n\r\nimport \"./Index.css\";\r\n\r\nclass Index extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<nav id=\"navbar\">\r\n\t\t\t\t<ul id=\"navbar-list\">\r\n\t\t\t\t\t<li className=\"dropdown-menu-item\">\r\n\t\t\t\t\t\tAlgorithms\r\n\t\t\t\t\t\t<Dropdown\r\n\t\t\t\t\t\t\telements={this.props.algos}\r\n\t\t\t\t\t\t\tfunction={this.props.updateAlgo}\r\n\t\t\t\t\t\t\tlabels={this.props.algoLabels}\r\n\t\t\t\t\t\t></Dropdown>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li className=\"dropdown-menu-item\">\r\n\t\t\t\t\t\tNodes\r\n\t\t\t\t\t\t<Dropdown\r\n\t\t\t\t\t\t\telements={this.props.nodes}\r\n\t\t\t\t\t\t\tfunction={this.props.selectNode}\r\n\t\t\t\t\t\t\tlabels={this.props.nodeLabels}\r\n\t\t\t\t\t\t></Dropdown>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li\r\n\t\t\t\t\t\tclassName=\"dropdown-menu-item\"\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tif (!this.props.running) {\r\n\t\t\t\t\t\t\t\tthis.props.runAlgo();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tRun\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li\r\n\t\t\t\t\t\tclassName=\"dropdown-menu-item\"\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tif (!this.props.running) {\r\n\t\t\t\t\t\t\t\tthis.props.clearBoard();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tClear Board\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li\r\n\t\t\t\t\t\tclassName=\"dropdown-menu-item\"\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tif (!this.props.running && !this.props.pathCleared) {\r\n\t\t\t\t\t\t\t\tthis.props.clearPath();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tClear Path\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li\r\n\t\t\t\t\t\tclassName=\"dropdown-menu-item\"\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tif (!this.props.running) {\r\n\t\t\t\t\t\t\t\tif (!this.props.boardCleared) {\r\n\t\t\t\t\t\t\t\t\tthis.props.clearBoard();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tthis.props.maze();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tKruskal Maze\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</nav>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Index;\r\n","import React, { Component } from \"react\";\r\nimport \"./AlgorithmCompletionMessage.css\";\r\n\r\nclass AlgorithmCompletionMessage extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst pathExistsMessage = `The ${this.props.algorithm} algorithm took ${this.props.elapsedTime}ms to finish!\r\n  Visited ${this.props.results.visited.length} nodes and the best path length\r\n  is ${this.props.results.sp.length} nodes!`;\r\n\r\n\t\tconst pathNotFoundMessage =\r\n\t\t\t\"There is no path from the start node to the end node!\";\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{this.props.display ? (\r\n\t\t\t\t\t<p id=\"message\">\r\n\t\t\t\t\t\t{this.props.pathExists ? pathExistsMessage : pathNotFoundMessage}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t) : null}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default AlgorithmCompletionMessage;\r\n","class GridHandlers {\r\n\tgetInitialGrid() {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst grid = [];\r\n\t\t\tfor (let row = 0; row < 17; row++) {\r\n\t\t\t\tconst currentRow = [];\r\n\t\t\t\tfor (let col = 0; col < 70; col++) {\r\n\t\t\t\t\tcurrentRow.push({\r\n\t\t\t\t\t\trow: row,\r\n\t\t\t\t\t\tcol: col,\r\n\t\t\t\t\t\tdistance: Infinity,\r\n\t\t\t\t\t\tcost: Infinity,\r\n\t\t\t\t\t\tpath: null,\r\n\t\t\t\t\t\tisWall: false,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tgrid.push(currentRow);\r\n\t\t\t}\r\n\r\n\t\t\tresolve(grid);\r\n\t\t});\r\n\t}\r\n\r\n\tclearGridPath(grid) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tfor (let row = 0; row < 17; row++) {\r\n\t\t\t\tfor (let col = 0; col < 70; col++) {\r\n\t\t\t\t\tconst node = {\r\n\t\t\t\t\t\trow: row,\r\n\t\t\t\t\t\tcol: col,\r\n\t\t\t\t\t\tdistance: Infinity,\r\n\t\t\t\t\t\tcost: Infinity,\r\n\t\t\t\t\t\tpath: null,\r\n\t\t\t\t\t\tisWall: false,\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tif (grid[row][col].isWall) {\r\n\t\t\t\t\t\tnode.isWall = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tgrid[row][col] = node;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tresolve();\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport default GridHandlers;\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"./Grid/Grid\";\r\nimport Menu from \"./Menu/Index\";\r\nimport AlgorithmCompletionMessage from \"./AlgorithmCompletionMessage/AlgorithmCompletionMessage\";\r\nimport GridHandlers from \"../Helpers/GridHandlers\";\r\n\r\nimport \"./Visualizer.css\";\r\n\r\nconst NODES = {\r\n\tWALL: 0,\r\n\tSTART: 1,\r\n\tEND: 2,\r\n};\r\n\r\nconst NODE_LABELS = new Map([\r\n\t[NODES.WALL, \"Wall\"],\r\n\t[NODES.START, \"Start\"],\r\n\t[NODES.END, \"End\"],\r\n]);\r\n\r\nconst ALGOS = {\r\n\tDIJKSTRA: 0,\r\n\tASTAR: 1,\r\n};\r\n\r\nconst ALGO_LABELS = new Map([\r\n\t[ALGOS.DIJKSTRA, \"Dijkstra\"],\r\n\t[ALGOS.ASTAR, \"AStar\"],\r\n]);\r\n\r\nexport default class Visualizer extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tgrid: [],\r\n\t\t\trunning: false,\r\n\t\t\tmouseDown: false,\r\n\t\t\tpathCleared: true,\r\n\t\t\tboardCleared: true,\r\n\t\t};\r\n\r\n\t\tthis.nodeToPlace = NODES.WALL;\r\n\t\tthis.startNode = null;\r\n\t\tthis.endNode = null;\r\n\t\tthis.algorithm = null;\r\n\t\tthis.tableElement = null;\r\n\t\tthis.results = { sp: [], visited: [] };\r\n\t\tthis.elapsedTime = 0;\r\n\t\tthis.gridHandlers = new GridHandlers();\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.gridHandlers.getInitialGrid().then((cleanGrid) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tgrid: cleanGrid,\r\n\t\t\t});\r\n\t\t});\r\n\t\tthis.tableElement = document.getElementById(\"grid\");\r\n\t}\r\n\r\n\tsetNodeToPlace = (nodeId) => {\r\n\t\tthis.nodeToPlace = nodeId;\r\n\t};\r\n\r\n\tmouseEventHandler = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tconst clickedCellID = event.target.id;\r\n\t\tconst cell = this.tableElement.querySelector(`#${clickedCellID}`);\r\n\r\n\t\tif (cell.className === \"unvisited\") {\r\n\t\t\tcell.className = this.validateNode(clickedCellID);\r\n\t\t}\r\n\r\n\t\tthis.setState({ boardCleared: false });\r\n\t};\r\n\r\n\t//Checks if there is already a start node and an end node\r\n\t//Returns the css class that corresponds to the selected node\r\n\tvalidateNode = (clickedCellID) => {\r\n\t\tlet row = parseInt(clickedCellID.split(\"_\")[1]);\r\n\t\tlet col = parseInt(clickedCellID.split(\"_\")[2]);\r\n\r\n\t\tlet node = this.state.grid[row][col];\r\n\r\n\t\tswitch (this.nodeToPlace) {\r\n\t\t\tcase 0:\r\n\t\t\t\tconst updateGrid = this.state.grid;\r\n\t\t\t\tupdateGrid[row][col].isWall = true;\r\n\t\t\t\tthis.setState({ grid: updateGrid });\r\n\t\t\t\treturn \"wall\";\r\n\r\n\t\t\tcase 1:\r\n\t\t\t\tif (this.startNode) {\r\n\t\t\t\t\tlet element = this.tableElement.querySelector(\r\n\t\t\t\t\t\t`#node_${this.startNode.row}_${this.startNode.col}`\r\n\t\t\t\t\t);\r\n\t\t\t\t\telement.className = \"unvisited\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.startNode = node;\r\n\r\n\t\t\t\treturn \"start\";\r\n\r\n\t\t\tcase 2:\r\n\t\t\t\tif (this.endNode) {\r\n\t\t\t\t\tlet element = this.tableElement.querySelector(\r\n\t\t\t\t\t\t`#node_${this.endNode.row}_${this.endNode.col}`\r\n\t\t\t\t\t);\r\n\t\t\t\t\telement.className = \"unvisited\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.endNode = node;\r\n\r\n\t\t\t\treturn \"end\";\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\r\n\tclearBoard = () => {\r\n\t\tthis.gridHandlers.getInitialGrid().then((cleanGrid) => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tgrid: cleanGrid,\r\n\t\t\t\tpathCleared: true,\r\n\t\t\t\tboardCleared: true,\r\n\t\t\t});\r\n\t\t});\r\n\t\tconst rows = document.getElementById(\"tableBody\").children;\r\n\t\tthis.startNode = null;\r\n\t\tthis.endNode = null;\r\n\r\n\t\tfor (let i = 0; i < rows.length; i++) {\r\n\t\t\tconst row = rows[i].children;\r\n\t\t\tfor (let j = 0; j < row.length; j++) {\r\n\t\t\t\trow[j].className = \"unvisited\";\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tclearPath = () => {\r\n\t\tthis.gridHandlers.clearGridPath(this.state.grid).then(() => {\r\n\t\t\tthis.setState({ pathCleared: true });\r\n\t\t});\r\n\t\tconst rows = document.getElementById(\"tableBody\").children;\r\n\r\n\t\tthis.startNode.cost = this.endNode.cost = Infinity;\r\n\t\tthis.startNode.distance = this.endNode.distance = Infinity;\r\n\t\tthis.startNode.path = this.endNode.path = null;\r\n\r\n\t\tfor (let i = 0; i < rows.length; i++) {\r\n\t\t\tconst row = rows[i].children;\r\n\t\t\tfor (let j = 0; j < row.length; j++) {\r\n\t\t\t\tif (\r\n\t\t\t\t\trow[j].className !== \"start\" &&\r\n\t\t\t\t\trow[j].className !== \"end\" &&\r\n\t\t\t\t\trow[j].className !== \"wall\"\r\n\t\t\t\t) {\r\n\t\t\t\t\trow[j].className = \"unvisited\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tanimateAlgo = () => {\r\n\t\tlet i = 1;\r\n\t\tlet timeout = 10;\r\n\t\tthis.setState({ running: true });\r\n\r\n\t\tconst end = this.tableElement.querySelector(\r\n\t\t\t`#node_${this.endNode.row}_${this.endNode.col}`\r\n\t\t);\r\n\t\tthis.results.visited.forEach((node) => {\r\n\t\t\tconst cell = this.tableElement.querySelector(\r\n\t\t\t\t`#node_${node.row}_${node.col}`\r\n\t\t\t);\r\n\t\t\tif (cell === end && this.results.sp.length !== 0) {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.animateSPNodes(timeout);\r\n\t\t\t\t}, timeout * i);\r\n\t\t\t}\r\n\r\n\t\t\tif (cell.className !== \"start\" && cell.className !== \"end\") {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tcell.className = \"visited\";\r\n\t\t\t\t}, timeout * i);\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (this.results.sp.length === 0) {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.setState({ running: false });\r\n\t\t\t}, timeout * i);\r\n\t\t}\r\n\t};\r\n\r\n\tanimateSPNodes = (timeout) => {\r\n\t\tlet j = 1;\r\n\t\tthis.results.sp.forEach((node) => {\r\n\t\t\tconst cell = this.tableElement.querySelector(\r\n\t\t\t\t`#node_${node.row}_${node.col}`\r\n\t\t\t);\r\n\r\n\t\t\tif (cell.className !== \"start\" && cell.className !== \"end\") {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tcell.className = \"shortestPath\";\r\n\t\t\t\t}, timeout * 3 * j);\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\t\t});\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.setState({ running: false, pathCleared: false });\r\n\t\t}, timeout * 3 * j);\r\n\t};\r\n\r\n\tgenerateMaze = () => {\r\n\t\timport(`../Mazes/KruskalRandomized`).then((mazeGenerator) => {\r\n\t\t\tlet mazeGeneratorInstance = new mazeGenerator.default(\r\n\t\t\t\tthis.state.grid,\r\n\t\t\t\tthis.tableElement\r\n\t\t\t);\r\n\t\t\tmazeGeneratorInstance.run().then((mazeGrid) => {\r\n\t\t\t\tthis.setState({ grid: mazeGrid, boardCleared: false });\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\trunAlgo = () => {\r\n\t\tif (\r\n\t\t\tthis.algorithm !== null &&\r\n\t\t\tthis.startNode !== null &&\r\n\t\t\tthis.endNode !== null\r\n\t\t) {\r\n\t\t\tif (!this.state.pathCleared) {\r\n\t\t\t\tthis.clearPath();\r\n\t\t\t}\r\n\t\t\timport(`../Algorithms/${ALGO_LABELS.get(this.algorithm)}`).then(\r\n\t\t\t\t(algo) => {\r\n\t\t\t\t\tlet algoInstance = new algo.default(\r\n\t\t\t\t\t\tthis.state.grid,\r\n\t\t\t\t\t\tthis.startNode,\r\n\t\t\t\t\t\tthis.endNode\r\n\t\t\t\t\t);\r\n\t\t\t\t\tconst start = new Date().getTime();\r\n\t\t\t\t\tthis.results = algoInstance.run();\r\n\t\t\t\t\tconst end = new Date().getTime();\r\n\t\t\t\t\tthis.elapsedTime = end - start;\r\n\t\t\t\t\tthis.animateAlgo();\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\twindow.alert(\r\n\t\t\t\t\"Something's missing! Check if you placed both start and end nodes nad if you chose an algorithm\"\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"main\">\r\n\t\t\t\t<div id=\"menu\">\r\n\t\t\t\t\t<Menu\r\n\t\t\t\t\t\tselectNode={this.setNodeToPlace}\r\n\t\t\t\t\t\tnodes={NODES}\r\n\t\t\t\t\t\tnodeLabels={NODE_LABELS}\r\n\t\t\t\t\t\talgos={ALGOS}\r\n\t\t\t\t\t\talgoLabels={ALGO_LABELS}\r\n\t\t\t\t\t\trunAlgo={this.runAlgo}\r\n\t\t\t\t\t\tclearBoard={this.clearBoard}\r\n\t\t\t\t\t\tclearPath={this.clearPath}\r\n\t\t\t\t\t\tupdateAlgo={(algoID) => {\r\n\t\t\t\t\t\t\tthis.algorithm = algoID;\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\trunning={this.state.running}\r\n\t\t\t\t\t\tboardCleared={this.state.boardCleared}\r\n\t\t\t\t\t\tpathCleared={this.state.pathCleared}\r\n\t\t\t\t\t\tmaze={this.generateMaze}\r\n\t\t\t\t\t></Menu>\r\n\t\t\t\t</div>\r\n\t\t\t\t<AlgorithmCompletionMessage\r\n\t\t\t\t\tdisplay={this.state.running}\r\n\t\t\t\t\tresults={this.results}\r\n\t\t\t\t\telapsedTime={this.elapsedTime}\r\n\t\t\t\t\talgorithm={this.algorithm}\r\n\t\t\t\t\tpathExists={this.results.sp.length === 0 ? false : true}\r\n\t\t\t\t/>\r\n\t\t\t\t<div id=\"grid\">\r\n\t\t\t\t\t<Grid\r\n\t\t\t\t\t\tmouseEventHandler={this.mouseEventHandler}\r\n\t\t\t\t\t\tsetMouseDownFalse={() => this.setState({ mouseDown: false })}\r\n\t\t\t\t\t\tsetMouseDownTrue={() => this.setState({ mouseDown: true })}\r\n\t\t\t\t\t\tmouseDown={this.state.mouseDown}\r\n\t\t\t\t\t\tgrid={this.state.grid}\r\n\t\t\t\t\t\trunning={this.state.running}\r\n\t\t\t\t\t\tpathCleared={this.state.pathCleared}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport Visualizer from \"./Visualizer/Visualizer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Visualizer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}