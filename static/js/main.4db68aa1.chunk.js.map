{"version":3,"sources":["Algorithms lazy /^/.*$/ groupOptions: {} namespace object","Visualizer/Grid/Grid.jsx","Visualizer/Menu/Menu.jsx","Visualizer/AlgorithmCompletionMessage/AlgorithmCompletionMessage.jsx","Visualizer/Visualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","Grid","props","grid","onMouseLeave","setMouseDownFalse","row","rowIdx","key","cell","cellIdx","className","onMouseDown","event","mouseEventHandler","setMouseDownTrue","onMouseUp","onMouseOver","mouseDown","Menu","updateAlgo","nodes","selectNode","onClick","runAlgo","clearBoard","clearPath","AlgosDropdown","NodesDropdown","value","WALL_NODE","START_NODE","END_NODE","AlgorithmCompletionMessage","pathExistsMessage","algorithm","elapsedTime","results","visited","length","sp","display","pathExists","NODES","Visualizer","setNodeToPlace","nodeType","nodeToPlace","preventDefault","clickedCellID","target","tableElement","querySelector","validateNode","parseInt","split","col","node","state","updateGrid","isWall","setState","startNode","endNode","getInitialGrid","rows","document","getElementById","children","i","j","animationComplete","clearGridPath","animateAlgo","end","forEach","setTimeout","animateSPNodes","timeout","algo","algoInstance","default","start","Date","getTime","run","window","alert","running","this","algoName","Component","currentRow","push","cost","Infinity","path","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4db68aa1.chunk.js","sourcesContent":["var map = {\n\t\"./AStar\": [\n\t\t8,\n\t\t0\n\t],\n\t\"./AStar.js\": [\n\t\t8,\n\t\t0\n\t],\n\t\"./Dijkstra\": [\n\t\t9,\n\t\t1\n\t],\n\t\"./Dijkstra.js\": [\n\t\t9,\n\t\t1\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 20;\nmodule.exports = webpackAsyncContext;","import React from \"react\";\r\nimport \"./Grid.css\";\r\n\r\nconst Grid = props => {\r\n  const grid = props.grid;\r\n  return (\r\n    <>\r\n      <table id=\"grid\" onMouseLeave={props.setMouseDownFalse}>\r\n        <tbody id=\"tableBody\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <tr key={rowIdx} id={`row_${rowIdx}`}>\r\n                {row.map((cell, cellIdx) => {\r\n                  return (\r\n                    <td\r\n                      key={cellIdx}\r\n                      id={`node_${rowIdx}_${cellIdx}`}\r\n                      className=\"unvisited\"\r\n                      onMouseDown={event => {\r\n                        props.mouseEventHandler(event);\r\n                        props.setMouseDownTrue();\r\n                      }}\r\n                      onMouseUp={props.setMouseDownFalse}\r\n                      onMouseOver={event => {\r\n                        if (props.mouseDown) {\r\n                          props.mouseEventHandler(event);\r\n                        }\r\n                      }}></td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React from \"react\";\r\nimport \"./Menu.css\";\r\n\r\nconst Menu = props => {\r\n  return (\r\n    <nav id=\"navbar\">\r\n      <ul id=\"navbar-list\">\r\n        <li className=\"dropdown-menu-item\">\r\n          Algorithms\r\n          <AlgosDropdown updateAlgo={props.updateAlgo}></AlgosDropdown>\r\n        </li>\r\n        <li className=\"dropdown-menu-item\">\r\n          Nodes\r\n          <NodesDropdown\r\n            nodes={props.nodes}\r\n            selectNode={props.selectNode}\r\n            updateAlgo={props.updateAlgo}></NodesDropdown>\r\n        </li>\r\n        <li className=\"dropdown-menu-item\" onClick={() => props.runAlgo()}>\r\n          Run\r\n        </li>\r\n        <li className=\"dropdown-menu-item\" onClick={() => props.clearBoard()}>\r\n          Clear Board\r\n        </li>\r\n        <li className=\"dropdown-menu-item\" onClick={() => props.clearPath()}>\r\n          Clear Path\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n\r\nconst AlgosDropdown = props => {\r\n  return (\r\n    <ul className=\"dropdown-menu\">\r\n      <li onClick={() => props.updateAlgo(\"Dijkstra\")}>Dijkstra</li>\r\n      <li onClick={() => props.updateAlgo(\"AStar\")}>A*</li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst NodesDropdown = props => {\r\n  return (\r\n    <ul className=\"dropdown-menu\">\r\n      <li value=\"Wall\" onClick={() => props.selectNode(props.nodes.WALL_NODE)}>\r\n        Wall\r\n      </li>\r\n      <li\r\n        value=\"Start\"\r\n        onClick={() => props.selectNode(props.nodes.START_NODE)}>\r\n        Start\r\n      </li>\r\n      <li value=\"End\" onClick={() => props.selectNode(props.nodes.END_NODE)}>\r\n        End\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./AlgorithmCompletionMessage.css\";\r\n\r\nconst AlgorithmCompletionMessage = props => {\r\n  const pathExistsMessage = `The ${props.algorithm} algorithm took ${props.elapsedTime}ms to finish!\r\n  Visited ${props.results.visited.length} nodes and the best path length\r\n  is ${props.results.sp.length} nodes!`;\r\n\r\n  const pathNotFoundMessage =\r\n    \"There is no path from the start node to the end node!\";\r\n\r\n  return (\r\n    <div>\r\n      {props.display ? (\r\n        <p id=\"message\">\r\n          {props.pathExists ? pathExistsMessage : pathNotFoundMessage}\r\n        </p>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlgorithmCompletionMessage;\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"./Grid/Grid\";\r\nimport Menu from \"./Menu/Menu\";\r\nimport AlgorithmCompletionMessage from \"./AlgorithmCompletionMessage/AlgorithmCompletionMessage\";\r\n\r\nimport \"./Visualizer.css\";\r\n\r\nconst NODES = {\r\n  WALL_NODE: 0,\r\n  START_NODE: 1,\r\n  END_NODE: 2\r\n};\r\n\r\nexport default class Visualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      running: false,\r\n      animationComplete: false\r\n    };\r\n\r\n    this.nodeToPlace = NODES.WALL_NODE;\r\n    this.startNode = null;\r\n    this.endNode = null;\r\n    this.mouseDown = false;\r\n    this.algorithm = null;\r\n    this.tableElement = null;\r\n    this.results = { sp: [], visited: [] };\r\n    this.elapsedTime = 0;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.tableElement = document.getElementById(\"grid\");\r\n    this.setState({\r\n      grid: grid\r\n    });\r\n  }\r\n\r\n  setNodeToPlace = nodeType => {\r\n    this.nodeToPlace = nodeType;\r\n  };\r\n\r\n  mouseEventHandler = event => {\r\n    event.preventDefault();\r\n    const clickedCellID = event.target.id;\r\n    const cell = this.tableElement.querySelector(`#${clickedCellID}`);\r\n\r\n    if (cell.className === \"unvisited\") {\r\n      cell.className = this.validateNode(clickedCellID);\r\n    }\r\n  };\r\n\r\n  //Checks if there is already a start node and an end node\r\n  //Returns the css class that corresponds to the selected node\r\n  validateNode = clickedCellID => {\r\n    let row = parseInt(clickedCellID.split(\"_\")[1]);\r\n    let col = parseInt(clickedCellID.split(\"_\")[2]);\r\n\r\n    let node = this.state.grid[row][col];\r\n\r\n    switch (this.nodeToPlace) {\r\n      case 0:\r\n        const updateGrid = this.state.grid;\r\n        updateGrid[row][col].isWall = true;\r\n        this.setState({ grid: updateGrid });\r\n        return \"wall\";\r\n\r\n      case 1:\r\n        if (this.startNode) {\r\n          let element = this.tableElement.querySelector(\r\n            `#node_${this.startNode.row}_${this.startNode.col}`\r\n          );\r\n          element.className = \"unvisited\";\r\n        }\r\n\r\n        this.startNode = node;\r\n\r\n        return \"start\";\r\n\r\n      case 2:\r\n        if (this.endNode) {\r\n          let element = this.tableElement.querySelector(\r\n            `#node_${this.endNode.row}_${this.endNode.col}`\r\n          );\r\n          element.className = \"unvisited\";\r\n        }\r\n\r\n        this.endNode = node;\r\n\r\n        return \"end\";\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  clearBoard = () => {\r\n    this.setState({ grid: getInitialGrid() });\r\n    const rows = document.getElementById(\"tableBody\").children;\r\n    this.startNode = null;\r\n    this.endNode = null;\r\n\r\n    for (let i = 0; i < rows.length; i++) {\r\n      const row = rows[i].children;\r\n      for (let j = 0; j < row.length; j++) {\r\n        row[j].className = \"unvisited\";\r\n      }\r\n    }\r\n    this.setState({ animationComplete: false });\r\n  };\r\n\r\n  clearPath = () => {\r\n    clearGridPath(this.state.grid);\r\n    const rows = document.getElementById(\"tableBody\").children;\r\n\r\n    for (let i = 0; i < rows.length; i++) {\r\n      const row = rows[i].children;\r\n      for (let j = 0; j < row.length; j++) {\r\n        if (\r\n          row[j].className !== \"start\" &&\r\n          row[j].className !== \"end\" &&\r\n          row[j].className !== \"wall\"\r\n        ) {\r\n          row[j].className = \"unvisited\";\r\n        }\r\n      }\r\n    }\r\n    this.setState({ animationComplete: false });\r\n  };\r\n\r\n  animateAlgo = () => {\r\n    let i = 1;\r\n    let timeout = 10;\r\n    const end = this.tableElement.querySelector(\r\n      `#node_${this.endNode.row}_${this.endNode.col}`\r\n    );\r\n    this.results.visited.forEach(node => {\r\n      const cell = this.tableElement.querySelector(\r\n        `#node_${node.row}_${node.col}`\r\n      );\r\n      if (cell === end && this.results.sp.length !== 0) {\r\n        setTimeout(() => {\r\n          this.animateSPNodes(timeout);\r\n        }, timeout * i);\r\n      }\r\n\r\n      if (cell.className !== \"start\" && cell.className !== \"end\") {\r\n        setTimeout(() => {\r\n          cell.className = \"visited\";\r\n        }, timeout * i);\r\n        i++;\r\n      }\r\n    });\r\n    setTimeout(() => {\r\n      this.setState({ animationComplete: true });\r\n    }, timeout * i);\r\n  };\r\n\r\n  animateSPNodes = timeout => {\r\n    let j = 1;\r\n    this.results.sp.forEach(node => {\r\n      const cell = this.tableElement.querySelector(\r\n        `#node_${node.row}_${node.col}`\r\n      );\r\n\r\n      if (cell.className !== \"start\" && cell.className !== \"end\") {\r\n        setTimeout(() => {\r\n          cell.className = \"shortestPath\";\r\n        }, timeout * 3 * j);\r\n        j++;\r\n      }\r\n    });\r\n  };\r\n\r\n  runAlgo = () => {\r\n    if (this.algorithm && this.startNode && this.endNode) {\r\n      import(`../Algorithms/${this.algorithm}`).then(algo => {\r\n        let algoInstance = new algo.default(\r\n          this.state.grid,\r\n          this.startNode,\r\n          this.endNode\r\n        );\r\n\r\n        const start = new Date().getTime();\r\n        this.results = algoInstance.run();\r\n        const end = new Date().getTime();\r\n        this.elapsedTime = end - start;\r\n\r\n        this.animateAlgo();\r\n      });\r\n    } else {\r\n      window.alert(\r\n        \"Something's missing! Check if you placed both start and end nodes nad if you chose an algorithm\"\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main\">\r\n        <div id=\"menu\">\r\n          <Menu\r\n            selectNode={this.setNodeToPlace}\r\n            nodes={NODES}\r\n            runAlgo={this.runAlgo}\r\n            clearBoard={this.clearBoard}\r\n            clearPath={this.clearPath}\r\n            updateAlgo={algoName => {\r\n              this.algorithm = algoName;\r\n            }}></Menu>\r\n        </div>\r\n        <AlgorithmCompletionMessage\r\n          display={this.state.animationComplete}\r\n          results={this.results}\r\n          elapsedTime={this.elapsedTime}\r\n          algorithm={this.algorithm}\r\n          pathExists={this.results.sp.length === 0 ? false : true}\r\n        />\r\n        <div id=\"grid\">\r\n          <Grid\r\n            mouseEventHandler={this.mouseEventHandler}\r\n            setMouseDownFalse={() => (this.mouseDown = false)}\r\n            setMouseDownTrue={() => (this.mouseDown = true)}\r\n            mouseDown={this.mouseDown}\r\n            grid={this.state.grid}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n\r\n  for (let row = 0; row < 17; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 70; col++) {\r\n      currentRow.push({\r\n        row: row,\r\n        col: col,\r\n        cost: Infinity,\r\n        path: null,\r\n        isWall: false\r\n      });\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst clearGridPath = grid => {\r\n  for (let row = 0; row < 17; row++) {\r\n    for (let col = 0; col < 70; col++) {\r\n      const node = {\r\n        row: row,\r\n        col: col,\r\n        cost: Infinity,\r\n        path: null,\r\n        isWall: false\r\n      };\r\n\r\n      if (grid[row][col].isWall) {\r\n        node.isWall = true;\r\n      }\r\n\r\n      grid[row][col] = node;\r\n    }\r\n  }\r\n};\r\n","import React from \"react\";\nimport Visualizer from \"./Visualizer/Visualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}